generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  access_token       String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  account       Account?
  clients       Client[]
  invoices      Invoice[]
  sessions      Session[]
  supportItems  SupportItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created")
  number    String?
  ownerId   String
  name      String
  billTo    String?
  owner     User      @relation(fields: [ownerId], references: [id])
  invoices  Invoice[]
}

model Invoice {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now()) @map("created")
  invoiceNo  String
  billTo     String
  date       DateTime
  clientId   String
  ownerId    String
  status     InvoiceStatus @default(CREATED)
  client     Client        @relation(fields: [clientId], references: [id])
  owner      User          @relation(fields: [ownerId], references: [id])
  activities Activity[]
}

model Activity {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now()) @map("created")
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  transitDuration Int?
  transitDistance Int?
  invoiceId       String?
  supportItemId   String
  itemDistance    Int?
  invoices        Invoice?    @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  supportItem     SupportItem @relation(fields: [supportItemId], references: [id], onDelete: Cascade)
}

model SupportItem {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now()) @map("created")
  description   String
  rateType      RateType
  weekdayCode   String
  weeknightCode String?
  saturdayCode  String?
  sundayCode    String?
  ownerId       String
  weekdayRate   Decimal
  weeknightRate Decimal?
  saturdayRate  Decimal?
  sundayRate    Decimal?
  owner         User       @relation(fields: [ownerId], references: [id])
  activities    Activity[]
}

enum InvoiceStatus {
  CREATED
  SENT
  PAID
}

enum RateType {
  KM
  HOUR
}
