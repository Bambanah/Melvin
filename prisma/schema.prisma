generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  access_token       String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name          String?
  emailVerified DateTime?
  image         String?

  abn        BigInt?
  bankName   String?
  bankNumber BigInt?
  bsb        Int?

  account  Account?
  sessions Session[]

  clients      Client[]
  invoices     Invoice[]
  supportItems SupportItem[]
  activities   Activity[]
}

model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created")
  updatedAt DateTime @default(now()) @updatedAt

  number              String?
  name                String
  billTo              String?
  invoiceNumberPrefix String?

  invoices   Invoice[]
  activities Activity[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Invoice {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created")
  updatedAt DateTime @default(now()) @updatedAt

  sentAt DateTime?
  paidAt DateTime?

  invoiceNo String
  billTo    String?
  date      DateTime
  status    InvoiceStatus @default(CREATED)

  activities Activity[]

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  ownerId  String
  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([ownerId])
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created")
  updatedAt DateTime @default(now()) @updatedAt

  date            DateTime  @db.Date()
  startTime       DateTime? @db.Time()
  endTime         DateTime? @db.Time()
  transitDuration Int?
  transitDistance Int?
  itemDistance    Int?

  ownerId       String?
  owner         User?       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  clientId      String?
  client        Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  supportItemId String
  supportItem   SupportItem @relation(fields: [supportItemId], references: [id], onDelete: Cascade)
  invoiceId     String?
  invoice       Invoice?    @relation(fields: [invoiceId], references: [id], onDelete: SetNull)

  @@index([ownerId])
  @@index([clientId])
  @@index([supportItemId])
  @@index([invoiceId])
}

model SupportItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created")
  updatedAt DateTime @default(now()) @updatedAt

  description   String
  rateType      RateType @default(HOUR)
  weekdayCode   String
  weeknightCode String?
  saturdayCode  String?
  sundayCode    String?
  weekdayRate   Decimal
  weeknightRate Decimal?
  saturdayRate  Decimal?
  sundayRate    Decimal?

  activities Activity[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

enum InvoiceStatus {
  CREATED
  SENT
  PAID
}

enum RateType {
  KM
  HOUR
}
